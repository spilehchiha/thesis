%% This BibTeX bibliography file was created using BibDesk.
%% https://bibdesk.sourceforge.io/

%% Created for Jeremy Clark at 2022-03-18 13:47:07 -0400 


%% Saved with string encoding Unicode (UTF-8) 



@inproceedings{9712091,
	author = {Wang, Ben and Chu, Hanting and Zhang, Pengcheng and Dong, Hai},
	booktitle = {2021 28th Asia-Pacific Software Engineering Conference (APSEC)},
	doi = {10.1109/APSEC53868.2021.00069},
	pages = {564-565},
	title = {Smart Contract Vulnerability Detection Using Code Representation Fusion},
	year = {2021},
    }

@inproceedings{EtherSolve,
  author    = {Marco Crosara and
               Luca Olivieri and
               Fausto Spoto and
               Fabio Tagliaferro},
  title     = {Re-engineering {ERC-20} Smart Contracts with Efficient Snapshots for
               the Java Virtual Machine},
  booktitle = {Third International Conference on Blockchain Computing and Applications,
               {BCCA} 2021, Tartu, Estonia, November 15-17, 2021},
  pages     = {187--194},
  publisher = {{IEEE}},
  year      = {2021},
  url       = {https://doi.org/10.1109/BCCA53669.2021.9657047},
  doi       = {10.1109/BCCA53669.2021.9657047},
  timestamp = {Sat, 09 Apr 2022 12:47:52 +0200},
  biburl    = {https://dblp.org/rec/conf/bcca/CrosaraOST21.bib},
  bibsource = {dblp computer science bibliography, https://dblp.org}
}


@article{BISTARELLI2020100198,
	abstract = {Smart contracts are programs that are used for verifying and enforcing the terms of an agreement. Ethereum is an extensively used platform that can be used to execute smart contracts. These can be defined by using high-level languages such as Solidity, Vyper and Bamboo that are compiled into low-level machine instructions, i.e., bytecode. These instructions define a Turing complete language and are often represented by using a readable format that is referred to as opcodes. Here, we present a novel, more comprehensive, study that aims at gaining a precise understanding on how programmers use the linguistic instructions supported by Ethereum. More precisely, the contracts' source code has been also analysed, in order to understand the high-level control structures and core instructions that are used for smart contract definitions, and how they are reflected on the opcode level. We have gathered ten of thousands of verified Ethereum smart contracts that have been written by using the Solidity language. This study can lay the groundwork for defining new formalisms and new domain specific languages (DSL). These can support the users in the development of decentralised applications (DAPPs).},
	author = {Stefano Bistarelli and Gianmarco Mazzante and Matteo Micheletti and Leonardo Mostarda and Davide Sestili and Francesco Tiezzi},
	doi = {https://doi.org/10.1016/j.iot.2020.100198},
	issn = {2542-6605},
	journal = {Internet of Things},
	keywords = {Ethereum, Smart contracts, Opcodes statistics, Analysis of smart contracts},
	pages = {100198},
	title = {Ethereum smart contracts: Analysis and statistics of their source code and opcodes},
	url = {https://www.sciencedirect.com/science/article/pii/S2542660520300342},
	volume = {11},
	year = {2020},
	bdsk-url-1 = {https://www.sciencedirect.com/science/article/pii/S2542660520300342},
	bdsk-url-2 = {https://doi.org/10.1016/j.iot.2020.100198}}


%%%

@unpublished{Sam15,
	author = {Sams, Robert},
	date-added = {2021-03-23 09:20:27 -0400},
	date-modified = {2021-03-23 09:21:09 -0400},
	note = {[Online]},
	title = {A Note on Cryptocurrency Stabilisation: Seigniorage Shares},
	year = {2015}}

@techreport{RoNi20,
	author = {Dan Robinson and Allan Niemerg},
	date-added = {2020-09-21 10:36:23 -0400},
	date-modified = {2020-09-21 10:37:13 -0400},
	institution = {Yield.is},
	month = {Apr},
	title = {The Yield Protocol: On-Chain Lending With Interest Rate Discovery},
	year = {2020}}

@techreport{KMM20,
	author = {Ariah Klages-Mundt and Andreea Minca},
	date-added = {2020-09-18 12:31:29 -0400},
	date-modified = {2020-09-18 12:32:01 -0400},
	institution = {arXiv},
	title = {While Stability Lasts: A Stochastic Model of Stablecoins},
	year = {2020}}

@inproceedings{GRB20,
	author = {Wanyun Gu and Anika Raghuvanshi and Dan Boneh},
	booktitle = {Cryptoeconomic Systems},
	date-added = {2020-09-17 11:32:05 -0400},
	date-modified = {2020-09-17 11:34:56 -0400},
	title = {Empirical Measurements on Pricing Oracles and Decentralized Governance for Stablecoins},
	year = {2020}}

@techreport{QZLG20,
	author = {Kaihua Qin and Liyi Zhou and Benjamin Livshits and Arthur Gervais},
	date-added = {2020-09-17 09:21:19 -0400},
	date-modified = {2020-09-17 09:22:22 -0400},
	institution = {arXiv},
	number = {2003.03810v2},
	title = {Attacking the {D}e{F}i Ecosystem with Flash Loans for Fun and Profit},
	year = {2020}}

@inproceedings{GPH+20,
	author = {Lewis Gudgeon and Daniel Perez and Dominik Harz and Benjamin Livshits and Arthur Gervais},
	booktitle = {CVCBT},
	date-added = {2020-09-17 09:18:16 -0400},
	date-modified = {2020-09-17 09:19:14 -0400},
	title = {The Decentralized Financial Crisis},
	year = {2020}}

@inproceedings{PHP+19,
	author = {Ingolf G A Pernice and Sebastian Henningsen and Roman Proskalovich and Martin Florian and Hermann Elendner},
	booktitle = {CVCBT},
	date-added = {2020-09-17 09:10:59 -0400},
	date-modified = {2020-09-17 09:10:59 -0400},
	title = {Monetary Stabilization in Cryptocurrencies: Design Approaches and Open Questions},
	year = {2019}}

@inproceedings{MSS20,
	author = {Amani Moin and Kevin Sekniqi and Emin Gun Sirer},
	booktitle = {Financial Cryptography},
	date-added = {2020-09-17 09:10:32 -0400},
	date-modified = {2020-09-17 09:10:32 -0400},
	title = {So{K}: A Classification Framework for Stablecoin Designs},
	year = {2020}}

@inproceedings{CDM20,
	author = {Jeremy Clark and Didem Demirag and Seyedehmahsa Moosavi},
	booktitle = {Communications of the ACM},
	date-added = {2020-09-17 08:20:07 -0400},
	date-modified = {2020-09-17 11:41:22 -0400},
	month = {July},
	number = {7},
	title = {Demystifying Stablecoins},
	volume = {63},
	year = {2020}}

@article{smart_contract_sanctuary,
	author = {Ortner, Martin and Eskandari, Shayan},
	title = {Smart Contract Sanctuary},
	url = {https://github.com/tintinweb/smart-contract-sanctuary},
	bdsk-url-1 = {https://github.com/tintinweb/smart-contract-sanctuary}}

@article{solidity-doppelganger,
	author = {Ortner, Martin},
	title = {Solidity Doppelgaenger},
	url = {https://github.com/tintinweb/solidity-doppelganger},
	bdsk-url-1 = {https://github.com/tintinweb/solidity-doppelganger}}

@article{Upg-Bug,
	author = {Marx, Steve},
	title = {Upgradeability Is a Bug},
	url = {https://medium.com/consensys-diligence/upgradeability-is-a-bug-dba0203152ce},
	bdsk-url-1 = {https://medium.com/consensys-diligence/upgradeability-is-a-bug-dba0203152ce}}

@article{socialUpgrade,
	author = {Collins, Patrick},
	title = {Not All Smart Contracts Are Immutable --- Create Upgradable Smart Contracts},
	url = {https://betterprogramming.pub/not-all-smart-contracts-are-immutable-create-upgradable-smart-contracts-e4e933b7b8a9},
	bdsk-url-1 = {https://betterprogramming.pub/not-all-smart-contracts-are-immutable-create-upgradable-smart-contracts-e4e933b7b8a9}}

@article{ToBantiPattern,
	author = {Trail of Bits Blog},
	title = {Contract upgrade anti-patterns},
	url = {https://blog.trailofbits.com/2018/09/05/contract-upgrade-anti-patterns/},
	bdsk-url-1 = {https://blog.trailofbits.com/2018/09/05/contract-upgrade-anti-patterns/}}

@article{selfDestruct,
	author = {Vitalik Buterin},
	title = {Expectations for backwards-incompatible changes / removal of features that may come soon},
	url = {https://www.reddit.com/r/ethereum/comments/lx32kv/expectations_for_backwardsincompatible_changes/},
	bdsk-url-1 = {https://www.reddit.com/r/ethereum/comments/lx32kv/expectations_for_backwardsincompatible_changes/}}

@article{aaveBreak,
	author = {Trail of Bits Blog},
	title = {Breaking Aave Upgradeability},
	url = {https://blog.trailofbits.com/2020/12/16/breaking-aave-upgradeability/},
	bdsk-url-1 = {https://blog.trailofbits.com/2020/12/16/breaking-aave-upgradeability/}}

@article{securityAdvise,
	author = {Santiago Palladino},
	title = {Security advisory: Initialize {UUPS} implementation contracts},
	url = {https://forum.openzeppelin.com/t/security-advisory-initialize-uups-implementation-contracts/15301},
	bdsk-url-1 = {https://forum.openzeppelin.com/t/security-advisory-initialize-uups-implementation-contracts/15301}}

@article{uupsAttacks,
	author = {Santiago Palladino},
	title = {UUPSUpgradeable Vulnerability Post-mortem},
	url = {https://forum.openzeppelin.com/t/uupsupgradeable-vulnerability-post-mortem/15680},
	bdsk-url-1 = {https://forum.openzeppelin.com/t/uupsupgradeable-vulnerability-post-mortem/15680}}

@article{rugPool,
	author = {Binance Academy},
	title = {Rug pull},
	url = {https://academy.binance.com/en/glossary/rug-pull},
	bdsk-url-1 = {https://academy.binance.com/en/glossary/rug-pull}}

@article{bentFinanceHack,
	author = {Bent Finance},
	title = {Bent Update},
	url = {https://bentfi.medium.com/bent-update-12ae69a41dc6},
	bdsk-url-1 = {https://bentfi.medium.com/bent-update-12ae69a41dc6}}

@article{certikReport,
	author = {Certik Company},
	title = {The State of DeFi Security 2021},
	url = {https://blog.openzeppelin.com/the-state-of-smart-contract-upgrades/},
	bdsk-url-1 = {https://blog.openzeppelin.com/the-state-of-smart-contract-upgrades/}}

@misc{minimalProxy,
	author = {Peter Murray and Nate Welch and Joe Messerman},
	date-modified = {2022-03-18 13:46:58 -0400},
	howpublished = {EIP-1167},
	title = {Minimal Proxy Contract},
	year = {2018},
	bdsk-url-1 = {https://eips.ethereum.org/EIPS/eip-1167}}

@article{delegatecallForwarders,
	author = {Vitalik Buterin},
	title = {DELEGATECALL forwarders: how to save ~50-98% on making many new contracts with the same code},
	url = {https://www.reddit.com/r/ethereum/comments/6c1jui/delegatecall_forwarders_how_to_save_5098_on/},
	bdsk-url-1 = {https://www.reddit.com/r/ethereum/comments/6c1jui/delegatecall_forwarders_how_to_save_5098_on/}}

@article{uupsEIP,
	author = {Gabriel Barros and Patrick Gallagher},
	title = {EIP-1822: Universal Upgradeable Proxy Standard (UUPS)},
	url = {https://eips.ethereum.org/EIPS/eip-1822},
	bdsk-url-1 = {https://eips.ethereum.org/EIPS/eip-1822}}

@article{openzeppelinPost,
	author = {SANTIAGO PALLADINO},
	title = {The State of Smart Contract Upgrades},
	url = {https://blog.openzeppelin.com/the-state-of-smart-contract-upgrades/},
	bdsk-url-1 = {https://blog.openzeppelin.com/the-state-of-smart-contract-upgrades/}}


@article{tobBlogPost,
	author = {Trail of Bits},
	title = {Contract upgrade anti-patterns},
	url = {https://blog.trailofbits.com/2018/09/05/contract-upgrade-anti-patterns/},
	bdsk-url-1 = {https://blog.trailofbits.com/2018/09/05/contract-upgrade-anti-patterns/}}

@article{frowisnot,
  author={Fr{\"o}wis, Michael and B{\"o}hme, Rainer},
  title={Not All Code are {Create2} Equal},
  url = {https://informationsecurity.uibk.ac.at/pdfs/FB-Ethereum-Create2.pdf},
  bdsk-url-1 = {https://informationsecurity.uibk.ac.at/pdfs/FB-Ethereum-Create2.pdf}}

@inproceedings{rodler2021evmpatch,
  title={$\{$EVMPatch$\}$: Timely and Automated Patching of Ethereum Smart Contracts},
  author={Rodler, Michael and Li, Wenting and Karame, Ghassan O and Davi, Lucas},
  booktitle={30th USENIX Security Symposium (USENIX Security 21)},
  pages={1289--1306},
  year={2021}
}

@article{perez2022dissimilar,
  title={Dissimilar Redundancy in DeFi},
  author={Perez, Daniel and Gudgeon, Lewis},
  journal={arXiv preprint arXiv:2201.12563},
  year={2022}
}
@article{perez2019broken,
  title={Broken metre: Attacking resource metering in EVM},
  author={Perez, Daniel and Livshits, Benjamin},
  journal={arXiv preprint arXiv:1909.07220},
  year={2019}
}
@inproceedings{chen2017adaptive,
  title={An adaptive gas cost mechanism for ethereum to defend against under-priced dos attacks},
  author={Chen, Ting and Li, Xiaoqi and Wang, Ying and Chen, Jiachi and Li, Zihao and Luo, Xiapu and Au, Man Ho and Zhang, Xiaosong},
  booktitle={International {C}onference on {I}nformation {S}ecurity practice and experience},
  pages={3--24},
  year={2017},
  organization={Springer}
}
@inproceedings{reijsbergen2021transaction,
  title={Transaction Fees on a Honeymoon: Ethereum's EIP-1559 One Month Later},
  author={Reijsbergen, Dani{\"e}l and Sridhar, Shyam and Monnot, Barnab{\'e} and Leonardos, Stefanos and Skoulakis, Stratis and Piliouras, Georgios},
  booktitle={2021 IEEE International Conference on Blockchain (Blockchain)},
  pages={196--204},
  year={2021},
  organization={IEEE}
}
@inproceedings{victor2019measuring,
  title={Measuring ethereum-based erc20 token networks},
  author={Victor, Friedhelm and L{\"u}ders, Bianca Katharina},
  booktitle={International Conference on Financial Cryptography and Data Security},
  pages={113--129},
  year={2019},
  organization={Springer}
}
@article{pinna2019massive,
  title={A massive analysis of {E}thereum smart contracts empirical study and code metrics},
  author={Pinna, Andrea and Ibba, Simona and Baralla, Gavina and Tonelli, Roberto and Marchesi, Michele},
  journal={IEEE Access},
  volume={7},
  pages={78194--78213},
  year={2019},
  publisher={IEEE}
}
@inproceedings{he2020characterizing,
  title={Characterizing code clones in the ethereum smart contract ecosystem},
  author={He, Ningyu and Wu, Lei and Wang, Haoyu and Guo, Yao and Jiang, Xuxian},
  booktitle={International Conference on Financial Cryptography and Data Security},
  pages={654--675},
  year={2020},
  organization={Springer}
}
@article{chen2021smart,
  title={Why do smart contracts self-destruct? investigating the selfdestruct function on ethereum},
  author={Chen, Jiachi and Xia, Xin and Lo, David and Grundy, John},
  journal={ACM Transactions on Software Engineering and Methodology (TOSEM)},
  volume={31},
  number={2},
  pages={1--37},
  year={2021},
  publisher={ACM New York, NY}
}
@article{walch2016path,
  title={The path of the blockchain lexicon (and the law)},
  author={Walch, Angela},
  journal={Rev. Banking \& Fin. L.},
  volume={36},
  pages={713},
  year={2016},
  publisher={HeinOnline}
}
@incollection{dhillon2017dao,
  title={The {DAO} hacked},
  author={Dhillon, Vikram and Metcalf, David and Hooper, Max},
  booktitle={Blockchain Enabled Applications},
  pages={67--78},
  year={2017},
  publisher={Springer}
}
@article{mccorry2021sok,
  title={SoK: Validating Bridges as a Scaling Solution for Blockchains},
  author={McCorry, Patrick and Buckland, Chris and Yee, Bennet and Song, Dawn},
  journal={Cryptology ePrint Archive},
  year={2021}
}
@inproceedings{eskandari2021sok,
  title={Sok: Oracles from the ground truth to market manipulation},
  author={Eskandari, Shayan and Salehi, Mehdi and Gu, Wanyun Catherine and Clark, Jeremy},
  booktitle={Proceedings of the 3rd ACM Conference on Advances in Financial Technologies},
  pages={127--141},
  year={2021}
}

}
@book{antonopoulos2018mastering,
  title={Mastering ethereum: building smart contracts and dapps},
  author={Antonopoulos, Andreas M and Wood, Gavin},
  year={2018},
  publisher={O'reilly Media}
}

@inproceedings{Empirical-Evaluation-of-Smart-Contract-Testing:What-is-the-Best-Choice,
author = {Ren, Meng and Yin, Zijing and Ma, Fuchen and Xu, Zhenyang and Jiang, Yu and Sun, Chengnian and Li, Huizhong and Cai, Yan},
title = {Empirical Evaluation of Smart Contract Testing: What is the Best Choice?},
year = {2021},
isbn = {9781450384599},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3460319.3464837},
doi = {10.1145/3460319.3464837},
abstract = {Security of smart contracts has attracted increasing attention in recent years. Many researchers have devoted themselves to devising testing tools for vulnerability detection. Each published tool has demonstrated its effectiveness through a series of evaluations on their own experimental scenarios. However, the inconsistency of evaluation settings such as different data sets or performance metrics, may result in biased conclusion.  In this paper, based on an empirical evaluation of widely used smart contract testing tools, we propose a unified standard to eliminate the bias in the assessment process. First, we collect 46,186 source-available smart contracts from four influential organizations. This comprehensive dataset is open to the public and involves different code characteristics, vulnerability patterns and application scenarios. Then we propose a 4-step evaluation process and summarize the difference among relevant work in these steps. We use nine representative tools to carry out extensive experiments. The results demonstrate that different choices of experimental settings could significantly affect tool performance and lead to misleading or even opposite conclusions. Finally, we generalize some problems of existing testing tools, and propose some possible directions for further improvement.},
booktitle = {Proceedings of the 30th ACM SIGSOFT International Symposium on Software Testing and Analysis},
pages = {566–579},
numpages = {14},
keywords = {observations and solutions, smart contract testing, evaluation},
location = {Virtual, Denmark},
series = {ISSTA 2021}
}

@inproceedings{Empirical-Review-of-Automated-Analysis-Tools-on-47587-Ethereum-Smart-Contracts,
author = {Durieux, Thomas and Ferreira, Jo\~{a}o F. and Abreu, Rui and Cruz, Pedro},
title = {Empirical Review of Automated Analysis Tools on 47,587 Ethereum Smart Contracts},
year = {2020},
isbn = {9781450371216},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3377811.3380364},
doi = {10.1145/3377811.3380364},
abstract = {Over the last few years, there has been substantial research on automated analysis, testing, and debugging of Ethereum smart contracts. However, it is not trivial to compare and reproduce that research. To address this, we present an empirical evaluation of 9 state-of-the-art automated analysis tools using two new datasets: i) a dataset of 69 annotated vulnerable smart contracts that can be used to evaluate the precision of analysis tools; and ii) a dataset with all the smart contracts in the Ethereum Blockchain that have Solidity source code available on Etherscan (a total of 47,518 contracts). The datasets are part of SmartBugs, a new extendable execution framework that we created to facilitate the integration and comparison between multiple analysis tools and the analysis of Ethereum smart contracts. We used SmartBugs to execute the 9 automated analysis tools on the two datasets. In total, we ran 428,337 analyses that took approximately 564 days and 3 hours, being the largest experimental setup to date both in the number of tools and in execution time. We found that only 42\% of the vulnerabilities from our annotated dataset are detected by all the tools, with the tool Mythril having the higher accuracy (27\%). When considering the largest dataset, we observed that 97\% of contracts are tagged as vulnerable, thus suggesting a considerable number of false positives. Indeed, only a small number of vulnerabilities (and of only two categories) were detected simultaneously by four or more tools.},
booktitle = {Proceedings of the ACM/IEEE 42nd International Conference on Software Engineering},
pages = {530–541},
numpages = {12},
keywords = {solidity, tools, Ethereum, debugging, smart contracts, testing, blockchain, reproducible bugs},
location = {Seoul, South Korea},
series = {ICSE '20}
}

@inproceedings{smartcheck,
author = {Tikhomirov, Sergei and Voskresenskaya, Ekaterina and Ivanitskiy, Ivan and Takhaviev, Ramil and Marchenko, Evgeny and Alexandrov, Yaroslav},
title = {SmartCheck: Static Analysis of Ethereum Smart Contracts},
year = {2018},
isbn = {9781450357265},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3194113.3194115},
doi = {10.1145/3194113.3194115},
abstract = {Ethereum is a major blockchain-based platform for smart contracts - Turing complete
programs that are executed in a decentralized network and usually manipulate digital
units of value. Solidity is the most mature high-level smart contract language. Ethereum
is a hostile execution environment, where anonymous attackers exploit bugs for immediate
financial gain. Developers have a very limited ability to patch deployed contracts.
Hackers steal up to tens of millions of dollars from flawed contracts, a well-known
example being "The DAO", broken in June 2016. Advice on secure Ethereum programming
practices is spread out across blogs, papers, and tutorials. Many sources are outdated
due to a rapid pace of development in this field. Automated vulnerability detection
tools, which help detect potentially problematic language constructs, are still underdeveloped
in this area.We provide a comprehensive classification of code issues in Solidity
and implement SmartCheck - an extensible static analysis tool that detects them1.
SmartCheck translates Solidity source code into an XML-based intermediate representation
and checks it against XPath patterns. We evaluated our tool on a big dataset of real-world
contracts and compared the results with manual audit on three contracts. Our tool
reflects the current state of knowledge on Solidity vulnerabilities and shows significant
improvements over alternatives. SmartCheck has its limitations, as detection of some
bugs requires more sophisticated techniques such as taint analysis or even manual
audit. We believe though that a static analyzer should be an essential part of contract
developers' toolbox, letting them fix simple bugs fast and allocate more effort to
complex issues.},
booktitle = {Proceedings of the 1st International Workshop on Emerging Trends in Software Engineering for Blockchain},
pages = {9–16},
numpages = {8},
keywords = {ethereum, solidity, smart contracts, static analysis, bug detection},
location = {Gothenburg, Sweden},
series = {WETSEB '18}
}

@inproceedings{slither,
author = {Feist, Josselin and Greico, Gustavo and Groce, Alex},
title = {Slither: A Static Analysis Framework for Smart Contracts},
year = {2019},
publisher = {IEEE Press},
url = {https://doi.org/10.1109/WETSEB.2019.00008},
doi = {10.1109/WETSEB.2019.00008},
abstract = {This paper describes Slither, a static analysis framework designed to provide rich
information about Ethereum smart contracts. It works by converting Solidity smart
contracts into an intermediate representation called SlithIR. SlithIR uses Static
Single Assignment (SSA) form and a reduced instruction set to ease implementation
of analyses while preserving semantic information that would be lost in transforming
Solidity to bytecode. Slither allows for the application of commonly used program
analysis techniques like dataflow and taint tracking. Our framework has four main
use cases: (1) automated detection of vulnerabilities, (2) automated detection of
code optimization opportunities, (3) improvement of the user's understanding of the
contracts, and (4) assistance with code review.In this paper, we present an overview
of Slither, detail the design of its intermediate representation, and evaluate its
capabilities on real-world contracts. We show that Slither's bug detection is fast,
accurate, and outperforms other static analysis tools at finding issues in Ethereum
smart contracts in terms of speed, robustness, and balance of detection and false
positives. We compared tools using a large dataset of smart contracts and manually
reviewed results for 1000 of the most used contracts.},
booktitle = {Proceedings of the 2nd International Workshop on Emerging Trends in Software Engineering for Blockchain},
pages = {8–15},
numpages = {8},
location = {Montreal, Quebec, Canada},
series = {WETSEB '19}
}

@misc{mythril,
year = {2022},
author = {ConsenSys},
title = {Mythril},
url = {https://github.com/ConsenSys/mythril-classic}
}

@misc{docker,
year = {Initial Release: 2013},
author = {Docker},
title = {Empowering App Development for Developers.},
url = {https://www.docker.com}
}
@misc{etherscan,
year = {2022},
author = {Etherscan},
title = {The Ethereum Blockchain Explorer},
url = {https://etherscan.io}
}


@misc{dao,
year = {2022},
author = {Phil Daian},
title = {Analysis of the dao exploit.},
url = {http://hackingdistributed.com/
2016/06/18/analysis-of-the-dao-exploit}
}

@misc{spankchain,
year = {2022},
author = {SpankChain},
title = {We got spanked: What we know so far.},
url = {https://medium.
com/spankchain/we-got-spanked-what-we-know-so-far-d5ed3a0f38fe}
}

@inproceedings{etherql,
	abstract = {Blockchain - the innovation behind Bitcoin - enables people to exchange digital money with complete trust, and seems to be completely transforming the way we think about trust. While blockchain is designed for secured, immutable funds transfer in trustless and decentralized environment, the underlying storage of blockchain is very simple with only limited supports for data access. Moreover, blockchain data are highly compressed before flushing to hard disk, making it harder to have an insight of these valuable data set. In this work, we develop EtherQL, an efficient query layer for Ethereum -- the most representative open-source blockchain system. EtherQL provides highly efficient query primitives for analyzing blockchain data, including range queries and top-k queries, which can be integrated with other applications with much flexibility. Moreover, EtherQL is designed to provide different levels of abstraction, which are suitable for data analysts, researchers and application developers.},
	address = {Cham},
	author = {Li, Yang and Zheng, Kai and Yan, Ying and Liu, Qi and Zhou, Xiaofang},
	booktitle = {Database Systems for Advanced Applications},
	editor = {Candan, Sel{\c{c}}uk and Chen, Lei and Pedersen, Torben Bach and Chang, Lijun and Hua, Wen},
	isbn = {978-3-319-55699-4},
	pages = {556--567},
	publisher = {Springer International Publishing},
	title = {EtherQL: A Query Layer for Blockchain System},
	year = {2017}}

@inproceedings{kalra2018zeus,
  title={Zeus: analyzing safety of smart contracts.},
  author={Kalra, Sukrit and Goel, Seep and Dhawan, Mohan and Sharma, Subodh},
  booktitle={Ndss},
  pages={1--12},
  year={2018}
}

@inproceedings{oyente,
author = {Luu, Loi and Chu, Duc-Hiep and Olickel, Hrishi and Saxena, Prateek and Hobor, Aquinas},
title = {Making Smart Contracts Smarter},
year = {2016},
isbn = {9781450341394},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi-org.lib-ezproxy.concordia.ca/10.1145/2976749.2978309},
doi = {10.1145/2976749.2978309},
abstract = {Cryptocurrencies record transactions in a decentralized data structure called a blockchain. Two of the most popular cryptocurrencies, Bitcoin and Ethereum, support the feature to encode rules or scripts for processing transactions. This feature has evolved to give practical shape to the ideas of smart contracts, or full-fledged programs that are run on blockchains. Recently, Ethereum's smart contract system has seen steady adoption, supporting tens of thousands of contracts, holding millions dollars worth of virtual coins.In this paper, we investigate the security of running smart contracts based on Ethereum in an open distributed network like those of cryptocurrencies. We introduce several new security problems in which an adversary can manipulate smart contract execution to gain profit. These bugs suggest subtle gaps in the understanding of the distributed semantics of the underlying platform. As a refinement, we propose ways to enhance the operational semantics of Ethereum to make contracts less vulnerable. For developers writing contracts for the existing Ethereum system, we build a symbolic execution tool called Oyente to find potential security bugs. Among 19, 336 existing Ethereum contracts, Oyente flags 8, 833 of them as vulnerable, including the TheDAO bug which led to a 60 million US dollar loss in June 2016. We also discuss the severity of other attacks for several case studies which have source code available and confirm the attacks (which target only our accounts) in the main Ethereum network.},
booktitle = {Proceedings of the 2016 ACM SIGSAC Conference on Computer and Communications Security},
pages = {254–269},
numpages = {16},
keywords = {symbolic execution, ethereum, cryptocurrencies, blockchain, smart contract},
location = {Vienna, Austria},
series = {CCS '16}
}

@inbook{safevm,
author = {Albert, Elvira and Correas, Jes\'{u}s and Gordillo, Pablo and Rom\'{a}n-D\'{\i}ez, Guillermo and Rubio, Albert},
title = {SAFEVM: A Safety Verifier for Ethereum Smart Contracts},
year = {2019},
isbn = {9781450362245},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi-org.lib-ezproxy.concordia.ca/10.1145/3293882.3338999},
abstract = {Ethereum smart contracts are public, immutable and distributed and, as such, they are prone to vulnerabilities sourcing from programming mistakes of developers. This paper presents SAFEVM, a verification tool for Ethereum smart contracts that makes use of state-of-the-art verification engines for C programs. SAFEVM takes as input an Ethereum smart contract (provided either in Solidity source code, or in compiled EVM bytecode), optionally with assert and require verification annotations, and produces in the output a report with the verification results. Besides general safety annotations, SAFEVM handles the verification of array accesses: it automatically generates SV-COMP verification assertions such that C verification engines can prove safety of array accesses. Our experimental evaluation has been undertaken on all contracts pulled from etherscan.io (more than 24,000) by using as back-end verifiers CPAchecker, SeaHorn and VeryMax.},
booktitle = {Proceedings of the 28th ACM SIGSOFT International Symposium on Software Testing and Analysis},
pages = {386–389},
numpages = {4}
}

@INPROCEEDINGS{vscl,  author={Mi, Feng and Wang, Zhuoyi and Zhao, Chen and Guo, Jinghui and Ahmed, Fawaz and Khan, Latifur},  booktitle={2021 IEEE International Conference on Blockchain and Cryptocurrency (ICBC)},   title={VSCL: Automating Vulnerability Detection in Smart Contracts with Deep Learning},   year={2021},  volume={},  number={},  pages={1-9},  doi={10.1109/ICBC51069.2021.9461050}}

@inproceedings{yang2021multi,
  title={A multi-modal transformer-based code summarization approach for smart contracts},
  author={Yang, Zhen and Keung, Jacky and Yu, Xiao and Gu, Xiaodong and Wei, Zhengyuan and Ma, Xiaoxue and Zhang, Miao},
  booktitle={2021 IEEE/ACM 29th International Conference on Program Comprehension (ICPC)},
  pages={1--12},
  year={2021},
  organization={IEEE}
}

@article{lutz2021escort,
  title={ESCORT: ethereum smart contracts vulnerability detection using deep neural network and transfer learning},
  author={Lutz, Oliver and Chen, Huili and Fereidooni, Hossein and Sendner, Christoph and Dmitrienko, Alexandra and Sadeghi, Ahmad Reza and Koushanfar, Farinaz},
  journal={arXiv preprint arXiv:2103.12607},
  year={2021}
}

@inproceedings{zhou2021smartgift,
  title={SmartGift: Learning to generate practical inputs for testing smart contracts},
  author={Zhou, Teng and Liu, Kui and Li, Li and Liu, Zhe and Klein, Jacques and Bissyand{\'e}, Tegawend{\'e} F},
  booktitle={2021 IEEE International Conference on Software Maintenance and Evolution (ICSME)},
  pages={23--34},
  year={2021},
  organization={IEEE}
}

@article{shi2021semantic,
  title={Semantic Code Search for Smart Contracts},
  author={Shi, Chaochen and Xiang, Yong and Yu, Jiangshan and Gao, Longxiang},
  journal={arXiv preprint arXiv:2111.14139},
  year={2021}
}

@misc{slithersimil,
  author       = {Sina Pilehchiha},
  howpublished = {https://blog.trailofbits.com/2020/10/23/efficient-audits-with-machine-learning-and-Slither-simil/},
  title        = {Efficient audits with machine learning and Slither-simil},
  year         = {2020}
}

@misc{slithir,
  author       = {Trail of Bits: Slithir documentation.},
  howpublished = {https://github.com/crytic/slither/wiki/SlithIR},
  title        = {},
  year         = {2018}
}

@article{ref_tools,
author = {Johnson, Brittany},
year = {2012},
month = {06},
pages = {1607-1609},
title = {A study on improving static analysis tools: Why are we not using them?},
journal = {Proceedings - International Conference on Software Engineering},
doi = {10.1109/ICSE.2012.6227228}
}

@inproceedings{ref_flag1,
author = {Nikoli\'{c}, Ivica and Kolluri, Aashish and Sergey, Ilya and Saxena, Prateek and Hobor, Aquinas},
title = {Finding The Greedy, Prodigal, and Suicidal Contracts at Scale},
year = {2018},
isbn = {9781450365697},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3274694.3274743},
doi = {10.1145/3274694.3274743},
abstract = {Smart contracts---stateful executable objects hosted on blockchains like Ethereum---carry billions of dollars worth of coins and cannot be updated once deployed. We present a new systematic characterization of a class of trace vulnerabilities, which result from analyzing multiple invocations of a contract over its lifetime. We focus attention on three example properties of such trace vulnerabilities: finding contracts that either lock funds indefinitely, leak them carelessly to arbitrary users, or can be killed by anyone. We implemented Maian, the first tool for specifying and reasoning about trace properties, which employs interprocedural symbolic analysis and concrete validator for exhibiting real exploits. Our analysis of nearly one million contracts flags 34, 200 (2, 365 distinct) contracts vulnerable, in 10 seconds per contract. On a subset of 3, 759 contracts which we sampled for concrete validation and manual analysis, we reproduce real exploits at a true positive rate of 89%, yielding exploits for 3, 686 contracts. Our tool finds exploits for the infamous Parity bug that indirectly locked $200 million US worth in Ether, which previous analyses failed to capture.},
booktitle = {Proceedings of the 34th Annual Computer Security Applications Conference},
pages = {653–663},
numpages = {11},
location = {San Juan, PR, USA},
series = {ACSAC '18}
}

@inproceedings{ref_flag2,
author = {Luu, Loi and Chu, Duc-Hiep and Olickel, Hrishi and Saxena, Prateek and Hobor, Aquinas},
title = {Making Smart Contracts Smarter},
year = {2016},
isbn = {9781450341394},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2976749.2978309},
doi = {10.1145/2976749.2978309},
abstract = {Cryptocurrencies record transactions in a decentralized data structure called a blockchain. Two of the most popular cryptocurrencies, Bitcoin and Ethereum, support the feature to encode rules or scripts for processing transactions. This feature has evolved to give practical shape to the ideas of smart contracts, or full-fledged programs that are run on blockchains. Recently, Ethereum's smart contract system has seen steady adoption, supporting tens of thousands of contracts, holding millions dollars worth of virtual coins.In this paper, we investigate the security of running smart contracts based on Ethereum in an open distributed network like those of cryptocurrencies. We introduce several new security problems in which an adversary can manipulate smart contract execution to gain profit. These bugs suggest subtle gaps in the understanding of the distributed semantics of the underlying platform. As a refinement, we propose ways to enhance the operational semantics of Ethereum to make contracts less vulnerable. For developers writing contracts for the existing Ethereum system, we build a symbolic execution tool called Oyente to find potential security bugs. Among 19, 336 existing Ethereum contracts, Oyente flags 8, 833 of them as vulnerable, including the TheDAO bug which led to a 60 million US dollar loss in June 2016. We also discuss the severity of other attacks for several case studies which have source code available and confirm the attacks (which target only our accounts) in the main Ethereum network.},
booktitle = {Proceedings of the 2016 ACM SIGSAC Conference on Computer and Communications Security},
pages = {254–269},
numpages = {16},
keywords = {ethereum, symbolic execution, cryptocurrencies, smart contract, blockchain},
location = {Vienna, Austria},
series = {CCS '16}
}

@misc{ref_parity,
  author       = {Parity},
  howpublished = {},
  title        = {https://www.parity.io/blog/a-postmortem-on-the-parity-multi-sig-library-self-destruct/},
  year         = {}
}

@misc{dasp,
  author       = {NCC Group},
  howpublished = {https://www.dasp.co/},
  title        = {},
  year         = {}
}

@misc{swcregistry,
  author       = {Consensys},
  howpublished = {https://swcregistry.io},
  title        = {},
  year         = {}
}

@inproceedings{torres2018osiris,
  title={Osiris: Hunting for integer bugs in ethereum smart contracts},
  author={Torres, Christof Ferreira and Sch{\"u}tte, Julian and State, Radu},
  booktitle={Proceedings of the 34th Annual Computer Security Applications Conference},
  pages={664--676},
  year={2018}
}

@inproceedings{Making-Smart-Contract-Development-More-Secure-and-Easier,
  title={Making smart contract development more secure and easier},
  author={Ren, Meng and Ma, Fuchen and Yin, Zijing and Fu, Ying and Li, Huizhong and Chang, Wanli and Jiang, Yu},
  booktitle={Proceedings of the 29th ACM Joint Meeting on European Software Engineering Conference and Symposium on the Foundations of Software Engineering},
  pages={1360--1370},
  year={2021}
}

@InProceedings{A-Survey-of-Attacks-on-Ethereum-Smart-Contracts,
author="Atzei, Nicola
and Bartoletti, Massimo
and Cimoli, Tiziana",
editor="Maffei, Matteo
and Ryan, Mark",
title="A Survey of Attacks on Ethereum Smart Contracts (SoK)",
booktitle="Principles of Security and Trust",
year="2017",
publisher="Springer Berlin Heidelberg",
address="Berlin, Heidelberg",
pages="164--186",
abstract="Smart contracts are computer programs that can be correctly executed by a network of mutually distrusting nodes, without the need of an external trusted authority. Since smart contracts handle and transfer assets of considerable value, besides their correct execution it is also crucial that their implementation is secure against attacks which aim at stealing or tampering the assets. We study this problem in Ethereum, the most well-known and used framework for smart contracts so far. We analyse the security vulnerabilities of Ethereum smart contracts, providing a taxonomy of common programming pitfalls which may lead to vulnerabilities. We show a series of attacks which exploit these vulnerabilities, allowing an adversary to steal money or cause other damage.",
isbn="978-3-662-54455-6"
}

@inproceedings{deduplicate,
author = {Durieux, Thomas and Ferreira, Jo\~{a}o F. and Abreu, Rui and Cruz, Pedro},
title = {Empirical Review of Automated Analysis Tools on 47,587 Ethereum Smart Contracts},
year = {2020},
isbn = {9781450371216},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3377811.3380364},
doi = {10.1145/3377811.3380364},
abstract = {Over the last few years, there has been substantial research on automated analysis, testing, and debugging of Ethereum smart contracts. However, it is not trivial to compare and reproduce that research. To address this, we present an empirical evaluation of 9 state-of-the-art automated analysis tools using two new datasets: i) a dataset of 69 annotated vulnerable smart contracts that can be used to evaluate the precision of analysis tools; and ii) a dataset with all the smart contracts in the Ethereum Blockchain that have Solidity source code available on Etherscan (a total of 47,518 contracts). The datasets are part of SmartBugs, a new extendable execution framework that we created to facilitate the integration and comparison between multiple analysis tools and the analysis of Ethereum smart contracts. We used SmartBugs to execute the 9 automated analysis tools on the two datasets. In total, we ran 428,337 analyses that took approximately 564 days and 3 hours, being the largest experimental setup to date both in the number of tools and in execution time. We found that only 42% of the vulnerabilities from our annotated dataset are detected by all the tools, with the tool Mythril having the higher accuracy (27%). When considering the largest dataset, we observed that 97% of contracts are tagged as vulnerable, thus suggesting a considerable number of false positives. Indeed, only a small number of vulnerabilities (and of only two categories) were detected simultaneously by four or more tools.},
booktitle = {Proceedings of the ACM/IEEE 42nd International Conference on Software Engineering},
pages = {530–541},
numpages = {12},
keywords = {tools, smart contracts, debugging, solidity, reproducible bugs, Ethereum, testing, blockchain},
location = {Seoul, South Korea},
series = {ICSE '20}
}

@unknown{soliditycheck,
author = {Zhang, Pengcheng and Xiao, Feng and Luo, Xiapu},
year = {2019},
month = {11},
pages = {},
title = {SolidityCheck : Quickly Detecting Smart Contract Problems Through Regular Expressions}
}

@inproceedings{securify,
author = {Tsankov, Petar and Dan, Andrei and Drachsler-Cohen, Dana and Gervais, Arthur and B\"{u}nzli, Florian and Vechev, Martin},
title = {Securify: Practical Security Analysis of Smart Contracts},
year = {2018},
isbn = {9781450356930},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3243734.3243780},
doi = {10.1145/3243734.3243780},
abstract = {Permissionless blockchains allow the execution of arbitrary programs (called smart contracts), enabling mutually untrusted entities to interact without relying on trusted third parties. Despite their potential, repeated security concerns have shaken the trust in handling billions of USD by smart contracts. To address this problem, we present Securify, a security analyzer for Ethereum smart contracts that is scalable, fully automated, and able to prove contract behaviors as safe/unsafe with respect to a given property. Securify's analysis consists of two steps. First, it symbolically analyzes the contract's dependency graph to extract precise semantic information from the code. Then, it checks compliance and violation patterns that capture sufficient conditions for proving if a property holds or not. To enable extensibility, all patterns are specified in a designated domain-specific language. Securify is publicly released, it has analyzed &gt;18K contracts submitted by its users, and is regularly used to conduct security audits by experts. We present an extensive evaluation of Securify over real-world Ethereum smart contracts and demonstrate that it can effectively prove the correctness of smart contracts and discover critical violations.},
booktitle = {Proceedings of the 2018 ACM SIGSAC Conference on Computer and Communications Security},
pages = {67–82},
numpages = {16},
keywords = {smart contracts, security analysis, verification, stratified datalog},
location = {Toronto, Canada},
series = {CCS '18}
}

@article{madmax,
author = {Grech, Neville and Kong, Michael and Jurisevic, Anton and Brent, Lexi and Scholz, Bernhard and Smaragdakis, Yannis},
title = {MadMax: Surviving out-of-Gas Conditions in Ethereum Smart Contracts},
year = {2018},
issue_date = {November 2018},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {2},
number = {OOPSLA},
url = {https://doi.org/10.1145/3276486},
doi = {10.1145/3276486},
abstract = {Ethereum is a distributed blockchain platform, serving as an ecosystem for smart contracts: full-fledged inter-communicating programs that capture the transaction logic of an account. Unlike programs in mainstream languages, a gas limit restricts the execution of an Ethereum smart contract: execution proceeds as long as gas is available. Thus, gas is a valuable resource that can be manipulated by an attacker to provoke unwanted behavior in a victim's smart contract (e.g., wasting or blocking funds of said victim). Gas-focused vulnerabilities exploit undesired behavior when a contract (directly or through other interacting contracts) runs out of gas. Such vulnerabilities are among the hardest for programmers to protect against, as out-of-gas behavior may be uncommon in non-attack scenarios and reasoning about it is far from trivial. In this paper, we classify and identify gas-focused vulnerabilities, and present MadMax: a static program analysis technique to automatically detect gas-focused vulnerabilities with very high confidence. Our approach combines a control-flow-analysis-based decompiler and declarative program-structure queries. The combined analysis captures high-level domain-specific concepts (such as "dynamic data structure storage" and "safely resumable loops") and achieves high precision and scalability. MadMax analyzes the entirety of smart contracts in the Ethereum blockchain in just 10 hours (with decompilation timeouts in 8% of the cases) and flags contracts with a (highly volatile) monetary value of over $2.8B as vulnerable. Manual inspection of a sample of flagged contracts shows that 81% of the sampled warnings do indeed lead to vulnerabilities, which we report on in our experiment.},
journal = {Proc. ACM Program. Lang.},
month = {oct},
articleno = {116},
numpages = {27},
keywords = {Program Analysis, Blockchain, Smart Contracts, Security}
}

@INPROCEEDINGS{ClairvOyance,  author={Xue, Yinxing and Ma, Mingliang and Lin, Yun and Sui, Yulei and Ye, Jiaming and Peng, Tianyong},  booktitle={2020 35th IEEE/ACM International Conference on Automated Software Engineering (ASE)},   title={Cross-Contract Static Analysis for Detecting Practical Reentrancy Vulnerabilities in Smart Contracts},   year={2020},  volume={},  number={},  pages={1029-1040},  doi={}}

@inbook{etehrTrust,
author = {Grishchenko, Ilya and Maffei, Matteo and Schneidewind, Clara},
year = {2018},
month = {04},
pages = {243-269},
title = {A Semantic Framework for the Security Analysis of Ethereum Smart Contracts},
isbn = {978-3-319-89721-9},
doi = {10.1007/978-3-319-89722-6_10}
}

@inproceedings{verismart,
author = {So, Sunbeom and Lee, Myungho and Park, Jisu and Lee, Heejo and Oh, Hakjoo},
year = {2020},
month = {05},
pages = {1678-1694},
title = {VERISMART: A Highly Precise Safety Verifier for Ethereum Smart Contracts},
doi = {10.1109/SP40000.2020.00032}
}

@INPROCEEDINGS{contractfuzzer,  author={Jiang, Bo and Liu, Ye and Chan, W.K.},  booktitle={2018 33rd IEEE/ACM International Conference on Automated Software Engineering (ASE)},   title={ContractFuzzer: Fuzzing Smart Contracts for Vulnerability Detection},   year={2018},  volume={},  number={},  pages={259-269},  doi={10.1145/3238147.3238177}}

@inproceedings{mossberg2019manticore,
  title={Manticore: A user-friendly symbolic execution framework for binaries and smart contracts},
  author={Mossberg, Mark and Manzano, Felipe and Hennenfent, Eric and Groce, Alex and Grieco, Gustavo and Feist, Josselin and Brunson, Trent and Dinaburg, Artem},
  booktitle={2019 34th IEEE/ACM International Conference on Automated Software Engineering (ASE)},
  pages={1186--1189},
  year={2019},
  organization={IEEE}
}

@article{chen2021defectchecker,
  title={Defectchecker: Automated smart contract defect detection by analyzing evm bytecode},
  author={Chen, Jiachi and Xia, Xin and Lo, David and Grundy, John and Luo, Xiapu and Chen, Ting},
  journal={IEEE Transactions on Software Engineering},
  year={2021},
  publisher={IEEE}
}

@inproceedings{chang2019scompile,
  title={sCompile: Critical path identification and analysis for smart contracts},
  author={Chang, Jialiang and Gao, Bo and Xiao, Hao and Sun, Jun and Cai, Yan and Yang, Zijiang},
  booktitle={International Conference on Formal Engineering Methods},
  pages={286--304},
  year={2019},
  organization={Springer}
}

@inproceedings{permenev2020verx,
  title={Verx: Safety verification of smart contracts},
  author={Permenev, Anton and Dimitrov, Dimitar and Tsankov, Petar and Drachsler-Cohen, Dana and Vechev, Martin},
  booktitle={2020 IEEE symposium on security and privacy (SP)},
  pages={1661--1677},
  year={2020},
  organization={IEEE}
}

@inproceedings{liu2018reguard,
  title={Reguard: finding reentrancy bugs in smart contracts},
  author={Liu, Chao and Liu, Han and Cao, Zhao and Chen, Zhong and Chen, Bangdao and Roscoe, Bill},
  booktitle={2018 IEEE/ACM 40th International Conference on Software Engineering: Companion (ICSE-Companion)},
  pages={65--68},
  year={2018},
  organization={IEEE}
}

@inproceedings{wustholz2020harvey,
  title={Harvey: A greybox fuzzer for smart contracts},
  author={W{\"u}stholz, Valentin and Christakis, Maria},
  booktitle={Proceedings of the 28th ACM Joint Meeting on European Software Engineering Conference and Symposium on the Foundations of Software Engineering},
  pages={1398--1409},
  year={2020}
}

@inproceedings{he2019learning,
  title={Learning to fuzz from symbolic execution with application to smart contracts},
  author={He, Jingxuan and Balunovi{\'c}, Mislav and Ambroladze, Nodar and Tsankov, Petar and Vechev, Martin},
  booktitle={Proceedings of the 2019 ACM SIGSAC Conference on Computer and Communications Security},
  pages={531--548},
  year={2019}
}

@inproceedings{nguyen2020sfuzz,
  title={sfuzz: An efficient adaptive fuzzer for solidity smart contracts},
  author={Nguyen, Tai D and Pham, Long H and Sun, Jun and Lin, Yun and Minh, Quang Tran},
  booktitle={Proceedings of the ACM/IEEE 42nd International Conference on Software Engineering},
  pages={778--788},
  year={2020}
}

@article{day2019ethereum,
  title={Ethereum in BigQuery: a public dataset for smart contract analytics},
  author={Day, Allen and Medvedev, Evgeny},
  journal={Google Cloud Blog},
  year={2019}
}

@inproceedings{dolan2016lava,
  title={Lava: Large-scale automated vulnerability addition},
  author={Dolan-Gavitt, Brendan and Hulin, Patrick and Kirda, Engin and Leek, Tim and Mambretti, Andrea and Robertson, Wil and Ulrich, Frederick and Whelan, Ryan},
  booktitle={2016 IEEE Symposium on Security and Privacy (SP)},
  pages={110--121},
  year={2016},
  organization={IEEE}
}

@inproceedings{grech2019gigahorse,
  title={Gigahorse: thorough, declarative decompilation of smart contracts},
  author={Grech, Neville and Brent, Lexi and Scholz, Bernhard and Smaragdakis, Yannis},
  booktitle={2019 IEEE/ACM 41st International Conference on Software Engineering (ICSE)},
  pages={1176--1186},
  year={2019},
  organization={IEEE}
}

@article{hu2021comprehensive,
  title={A comprehensive survey on smart contract construction and execution: paradigms, tools, and systems},
  author={Hu, Bin and Zhang, Zongyang and Liu, Jianwei and Liu, Yizhong and Yin, Jiayuan and Lu, Rongxing and Lin, Xiaodong},
  journal={Patterns},
  volume={2},
  number={2},
  pages={100179},
  year={2021},
  publisher={Elsevier}
}

@inproceedings{hwang2020gap,
  title={Gap between theory and practice: An empirical study of security patches in solidity},
  author={Hwang, Sungjae and Ryu, Sukyoung},
  booktitle={Proceedings of the ACM/IEEE 42nd International Conference on Software Engineering},
  pages={542--553},
  year={2020}
}

@article{mehar2019understanding,
  title={Understanding a revolutionary and flawed grand experiment in blockchain: the DAO attack},
  author={Mehar, Muhammad Izhar and Shier, Charles Louis and Giambattista, Alana and Gong, Elgar and Fletcher, Gabrielle and Sanayhie, Ryan and Kim, Henry M and Laskowski, Marek},
  journal={Journal of Cases on Information Technology (JCIT)},
  volume={21},
  number={1},
  pages={19--32},
  year={2019},
  publisher={IGI Global}
}

@article{szabo1997formalizing,
  title={Formalizing and securing relationships on public networks},
  author={Szabo, Nick},
  journal={First monday},
  year={1997}
}

@article{yashavant2022scrawld,
  title={ScrawlD: A Dataset of Real World Ethereum Smart Contracts Labelled with Vulnerabilities},
  author={Yashavant, Chavhan Sujeet and Kumar, Saurabh and Karkare, Amey},
  journal={arXiv preprint arXiv:2202.11409},
  year={2022}
}

@article{ferreira2022smart,
  title={From Smart to Secure Contracts: Automated Security Assessment and Improvement of Ethereum Smart Contracts},
  author={Ferreira Torres, Christof},
  year={2022},
  school={University of Luxembourg, Luxembourg}
}

@article{surucu2022survey,
  title={A survey on ethereum smart contract vulnerability detection using machine learning},
  author={S{\"u}r{\"u}c{\"u}, Onur and Yeprem, Uygar and Wilkinson, Connor and Hilal, Waleed and Gadsden, S Andrew and Yawney, John and Alsadi, Naseem and Giuliano, Alessandro},
  journal={Disruptive Technologies in Information Sciences VI},
  volume={12117},
  pages={110--121},
  year={2022},
  publisher={SPIE}
}

@inproceedings{wohrer2018smart,
  title={Smart contracts: security patterns in the ethereum ecosystem and solidity},
  author={Wohrer, Maximilian and Zdun, Uwe},
  booktitle={2018 International Workshop on Blockchain Oriented Software Engineering (IWBOSE)},
  pages={2--8},
  year={2018},
  organization={IEEE}
}


@misc{pragmadocs,
  author       = {},
  howpublished = {},
  title        = {Pragmas},
  year         = {2021},
  url          = {https://docs.soliditylang.org/en/v0.8.15/layout-of-source-files.html#pragmas},
}

@misc{soliditydocs,
  author       = {},
  howpublished = {},
  title        = {Pragmas},
  year         = {2021},
  url          = {https://docs.soliditylang.org/en/v0.8.15/},
}

@misc{ethdocs,
  author       = {},
  howpublished = {},
  title        = {Pragmas},
  year         = {2021},
  url          = {https://ethereum.org/en/developers/docs},
}

@article{pierro2020organized,
  title={An organized repository of ethereum smart contracts’ source codes and metrics},
  author={Pierro, Giuseppe Antonio and Tonelli, Roberto and Marchesi, Michele},
  journal={Future internet},
  volume={12},
  number={11},
  pages={197},
  year={2020},
  publisher={MDPI}
}

@phdthesis{srikant2020vulcan,
  title={Vulcan: classifying vulnerabilities in solidity smart contracts using dependency-based deep program representations},
  author={Srikant, Shashank},
  year={2020},
  school={Massachusetts Institute of Technology}
}

@inproceedings{gottschlich2018three,
  title={The three pillars of machine programming},
  author={Gottschlich, Justin and Solar-Lezama, Armando and Tatbul, Nesime and Carbin, Michael and Rinard, Martin and Barzilay, Regina and Amarasinghe, Saman and Tenenbaum, Joshua B and Mattson, Tim},
  booktitle={Proceedings of the 2nd ACM SIGPLAN International Workshop on Machine Learning and Programming Languages},
  pages={69--80},
  year={2018}
}

@article{ethereum2014ethereum,
  title={Ethereum Whitepaper},
  author={Ethereum, W},
  journal={Ethereum. URL: https://ethereum. org [accessed 2020-07-07]},
  year={2014}
}

 @misc{pilehchiha_2020, title={Efficient audits with Machine Learning and slither-simil}, url={https://blog.trailofbits.com/2020/10/23/efficient-audits-with-machine-learning-and-slither-simil/}, journal={Trail of Bits Blog}, publisher={Trail of Bits}, author={Pilehchiha, Sina}, year={2020}, month={Oct}} 

 @inproceedings{liu2019enabling,
  title={Enabling clone detection for ethereum via smart contract birthmarks},
  author={Liu, Han and Yang, Zhiqiang and Jiang, Yu and Zhao, Wenqi and Sun, Jiaguang},
  booktitle={2019 IEEE/ACM 27th International Conference on Program Comprehension (ICPC)},
  pages={105--115},
  year={2019},
  organization={IEEE}
}

@inproceedings{ferreira2020smartbugs,
  title={Smartbugs: A framework to analyze solidity smart contracts},
  author={Ferreira, Jo{\~a}o F and Cruz, Pedro and Durieux, Thomas and Abreu, Rui},
  booktitle={Proceedings of the 35th IEEE/ACM International Conference on Automated Software Engineering},
  pages={1349--1352},
  year={2020}
}

@inproceedings{varun2022mitigating,
  title={Mitigating Frontrunning Attacks in Ethereum},
  author={Varun, Maddipati and Palanisamy, Balaji and Sural, Shamik},
  booktitle={Proceedings of the Fourth ACM International Symposium on Blockchain and Secure Critical Infrastructure},
  pages={115--124},
  year={2022}
}

@misc{clients,
  author       = {},
  howpublished = {},
  title        = {Ethereum clients},
  year         = {},
  url          = {https://github.com/ethereum/wiki/wiki/Clients,-tools,-dapp-browsers,-wallets-and-other-projects},
}

@misc{arithmeticVuln,
  author       = {},
  howpublished = {},
  title        = {},
  year         = {},
  url          = {https://peckshield.com/2018/04/22/batchOverflow/},
}

@article{chen2018systematic,
  title={A systematic review of fuzzing techniques},
  author={Chen, Chen and Cui, Baojiang and Ma, Jinxin and Wu, Runpu and Guo, Jianchao and Liu, Wenqian},
  journal={Computers \& Security},
  volume={75},
  pages={118--137},
  year={2018},
  publisher={Elsevier}
}

@article{boyer1975select,
  title={SELECT—a formal system for testing and debugging programs by symbolic execution},
  author={Boyer, Robert S and Elspas, Bernard and Levitt, Karl N},
  journal={ACM SigPlan Notices},
  volume={10},
  number={6},
  pages={234--245},
  year={1975},
  publisher={ACM New York, NY, USA}
}

@article{xing2020new,
  title={A new scheme of vulnerability analysis in smart contract with machine learning},
  author={Xing, Cipai and Chen, Zhuorong and Chen, Lexin and Guo, Xiaojie and Zheng, Zibin and Li, Jin},
  journal={Wireless Networks},
  pages={1--10},
  year={2020},
  publisher={Springer}
}

@inproceedings{fan2021smart,
  title={Smart Contract Vulnerability Detection Based on Dual Attention Graph Convolutional Network},
  author={Fan, Yuqi and Shang, Siyuan and Ding, Xu},
  booktitle={International Conference on Collaborative Computing: Networking, Applications and Worksharing},
  pages={335--351},
  year={2021},
  organization={Springer}
}

@article{wang2020contractward,
  title={Contractward: Automated vulnerability detection models for ethereum smart contracts},
  author={Wang, Wei and Song, Jingjing and Xu, Guangquan and Li, Yidong and Wang, Hao and Su, Chunhua},
  journal={IEEE Transactions on Network Science and Engineering},
  volume={8},
  number={2},
  pages={1133--1144},
  year={2020},
  publisher={IEEE}
}

@article{zhang2022novel,
  title={A Novel Smart Contract Vulnerability Detection Method Based on Information Graph and Ensemble Learning},
  author={Zhang, Lejun and Wang, Jinlong and Wang, Weizheng and Jin, Zilong and Zhao, Chunhui and Cai, Zhennao and Chen, Huiling},
  journal={Sensors},
  volume={22},
  number={9},
  pages={3581},
  year={2022},
  publisher={MDPI}
}

@article{zhang2022spcbig,
  title={SPCBIG-EC: A Robust Serial Hybrid Model for Smart Contract Vulnerability Detection},
  author={Zhang, Lejun and Li, Yuan and Jin, Tianxing and Wang, Weizheng and Jin, Zilong and Zhao, Chunhui and Cai, Zhennao and Chen, Huiling},
  journal={Sensors},
  volume={22},
  number={12},
  pages={4621},
  year={2022},
  publisher={MDPI}
}

@article{li2020survey,
  title={A survey on the security of blockchain systems},
  author={Li, Xiaoqi and Jiang, Peng and Chen, Ting and Luo, Xiapu and Wen, Qiaoyan},
  journal={Future Generation Computer Systems},
  volume={107},
  pages={841--853},
  year={2020},
  publisher={Elsevier}
}